// Code generated by MockGen. DO NOT EDIT.
// Source: interactor.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	entity "oc-2023/pkg/domain/entity"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockInteractor is a mock of Interactor interface.
type MockInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockInteractorMockRecorder
}

// MockInteractorMockRecorder is the mock recorder for MockInteractor.
type MockInteractorMockRecorder struct {
	mock *MockInteractor
}

// NewMockInteractor creates a new mock instance.
func NewMockInteractor(ctrl *gomock.Controller) *MockInteractor {
	mock := &MockInteractor{ctrl: ctrl}
	mock.recorder = &MockInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractor) EXPECT() *MockInteractorMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockInteractor) CreateComment(ctx *gin.Context, comment *entity.PostComments) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockInteractorMockRecorder) CreateComment(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockInteractor)(nil).CreateComment), ctx, comment)
}

// CreateLike mocks base method.
func (m *MockInteractor) CreateLike(ctx *gin.Context, like *entity.PostLikes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLike", ctx, like)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLike indicates an expected call of CreateLike.
func (mr *MockInteractorMockRecorder) CreateLike(ctx, like interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLike", reflect.TypeOf((*MockInteractor)(nil).CreateLike), ctx, like)
}

// DeleteComment mocks base method.
func (m *MockInteractor) DeleteComment(ctx *gin.Context, comment *entity.DeleteComments) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockInteractorMockRecorder) DeleteComment(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockInteractor)(nil).DeleteComment), ctx, comment)
}

// DeleteLike mocks base method.
func (m *MockInteractor) DeleteLike(ctx *gin.Context, like *entity.DeleteLikes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLike", ctx, like)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLike indicates an expected call of DeleteLike.
func (mr *MockInteractorMockRecorder) DeleteLike(ctx, like interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLike", reflect.TypeOf((*MockInteractor)(nil).DeleteLike), ctx, like)
}

// GetCommentsByID mocks base method.
func (m *MockInteractor) GetCommentsByID(ctx *gin.Context, ID uuid.UUID) ([]entity.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByID", ctx, ID)
	ret0, _ := ret[0].([]entity.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByID indicates an expected call of GetCommentsByID.
func (mr *MockInteractorMockRecorder) GetCommentsByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByID", reflect.TypeOf((*MockInteractor)(nil).GetCommentsByID), ctx, ID)
}

// GetLikesByID mocks base method.
func (m *MockInteractor) GetLikesByID(ctx *gin.Context, ID uuid.UUID) ([]entity.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikesByID", ctx, ID)
	ret0, _ := ret[0].([]entity.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikesByID indicates an expected call of GetLikesByID.
func (mr *MockInteractorMockRecorder) GetLikesByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikesByID", reflect.TypeOf((*MockInteractor)(nil).GetLikesByID), ctx, ID)
}
